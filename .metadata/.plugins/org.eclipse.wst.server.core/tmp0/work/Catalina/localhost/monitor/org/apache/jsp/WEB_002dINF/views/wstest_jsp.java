/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-04-16 07:43:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class wstest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1552270070766L));
    _jspx_dependants.put("jar:file:/C:/Users/student/web-server/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/monitor/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://use.fontawesome.com/releases/v5.7.2/css/all.css\"\r\n");
      out.write("\tintegrity=\"sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr\"\r\n");
      out.write("\tcrossorigin=\"anonymous\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\">\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\">\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=rbeyz68rf5&submodules=geocoder\">\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\tif (!window.WebSocket) {\r\n");
      out.write("\t\t\talert('웹 소켓을 지원하지 않는 브라우저 입니다.');\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar mapOptions = {\r\n");
      out.write("\t\t\tcenter : new naver.maps.LatLng(37.3595704, 127.105399),\r\n");
      out.write("\t\t\tzoom : 10, // 1(최소)~14(최대), 기본 : 11\r\n");
      out.write("\t\t\tscaleControl : false,\r\n");
      out.write("\t\t\tlogoControl : false,\r\n");
      out.write("\t\t\tmapDataControl : false,\r\n");
      out.write("\t\t\tzoomControl : true,\r\n");
      out.write("\t\t\tzoomControlOptions : {\r\n");
      out.write("\t\t\t\tstyle : naver.maps.ZoomControlStyle.SMALL\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\t\t\r\n");
      out.write("\t\tvar map = new naver.maps.Map('map', mapOptions);\r\n");
      out.write("\r\n");
      out.write("\t\tvar carMarker = new naver.maps.Marker({\r\n");
      out.write("\t\t\tmap : map,\r\n");
      out.write("\t\t\tposition : new naver.maps.LatLng(37.3595704, 127.105399),\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar socket = new WebSocket(\"ws://localhost:8080/monitor/car\");\r\n");
      out.write("\t\tsocket.onopen = function() {\r\n");
      out.write("\t\t\tconsole.log('접속 성공');\r\n");
      out.write("\r\n");
      out.write("\t\t\tmsg = JSON.stringify({\r\n");
      out.write("\t\t\t\tmsgType : 'POSITION_SUB',\r\n");
      out.write("\t\t\t\ttarget : '1',\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tsocket.send(msg);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tsocket.onmessage = function(msg) {\r\n");
      out.write("\t\t\tcarMsg = JSON.parse(msg.data)\r\n");
      out.write("\t\t\tconsole.log('데이터 수신 : ', carMsg);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (carMsg.msgType == \"POSITION\") {\r\n");
      out.write("\t\t\t\tposition = new naver.maps.LatLng(carMsg.lat, carMsg.lng);\r\n");
      out.write("\t\t\t\tconsole.log('마커 위치를 변경 : ', carMsg.lat, carMsg.lng);\r\n");
      out.write("\t\t\t\tmap.setCenter(position);\r\n");
      out.write("\t\t\t\tcarMarker.setPosition(position);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t$('#recv-message').text(msg.data);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tsocket.onclose = function() {\r\n");
      out.write("\t\t\tconsole.log('접속 해제');\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tsocket.onerror = function(err) {\r\n");
      out.write("\t\t\tconsole.log('에러 ', err);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$('#send-btn').click(function() {\r\n");
      out.write("\t\t\tvar msg = $('#send-message').val();\r\n");
      out.write("\t\t\tvar lat = $('#send-lat').val();\r\n");
      out.write("\t\t\tvar lng = $('#send-lng').val();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tmsg = JSON.stringify({\r\n");
      out.write("\t\t\t\tmsgType : 'POSITION',\r\n");
      out.write("\t\t\t\ttarget : '1',\r\n");
      out.write("\t\t\t\tlat : lat,\r\n");
      out.write("\t\t\t\tlng : lng\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\tsocket.send(msg);\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$('.direction').click(function() {\r\n");
      out.write("\t\t\tdirection = $(this).data('direction');\r\n");
      out.write("\t\t\tmsg = JSON.stringify({\r\n");
      out.write("\t\t\t\tmsgType:'CONTROL',\r\n");
      out.write("\t\t\t\ttarget:'1',\r\n");
      out.write("\t\t\t\tdirection:direction\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tsocket.send(msg)\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>웹 소켓 테스트</h1>\r\n");
      out.write("\t<div> \r\n");
      out.write("\t\t위도 : <input type=\"text\" id=\"send-lat\">\r\n");
      out.write("\t\t경도 : <input type=\"text\" id=\"send-lng\">\r\n");
      out.write("\t\t<button type=\"button\" id=\"send-btn\">위치전송</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t수신 메시지 : <span id=\"recv-message\"></span>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"map\" style=\"width: 100%; height: 400px;\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
